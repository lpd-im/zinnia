# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _zinnia
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


version = _zinnia.version
class Character(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Character, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Character, name)
    __repr__ = _swig_repr
    def set_value(*args): return _zinnia.Character_set_value(*args)
    def value(*args): return _zinnia.Character_value(*args)
    def set_width(*args): return _zinnia.Character_set_width(*args)
    def set_height(*args): return _zinnia.Character_set_height(*args)
    def width(*args): return _zinnia.Character_width(*args)
    def height(*args): return _zinnia.Character_height(*args)
    def clear(*args): return _zinnia.Character_clear(*args)
    def add(*args): return _zinnia.Character_add(*args)
    def strokes_size(*args): return _zinnia.Character_strokes_size(*args)
    def stroke_size(*args): return _zinnia.Character_stroke_size(*args)
    def x(*args): return _zinnia.Character_x(*args)
    def y(*args): return _zinnia.Character_y(*args)
    def parse(*args): return _zinnia.Character_parse(*args)
    def what(*args): return _zinnia.Character_what(*args)
    __swig_destroy__ = _zinnia.delete_Character
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _zinnia.new_Character(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(*args): return _zinnia.Character_toString(*args)
Character_swigregister = _zinnia.Character_swigregister
Character_swigregister(Character)

class Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Result, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def value(*args): return _zinnia.Result_value(*args)
    def score(*args): return _zinnia.Result_score(*args)
    def size(*args): return _zinnia.Result_size(*args)
    __swig_destroy__ = _zinnia.delete_Result
    __del__ = lambda self : None;
Result_swigregister = _zinnia.Result_swigregister
Result_swigregister(Result)

class Recognizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Recognizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Recognizer, name)
    __repr__ = _swig_repr
    def open(*args): return _zinnia.Recognizer_open(*args)
    def close(*args): return _zinnia.Recognizer_close(*args)
    def size(*args): return _zinnia.Recognizer_size(*args)
    def value(*args): return _zinnia.Recognizer_value(*args)
    def classify(*args): return _zinnia.Recognizer_classify(*args)
    def what(*args): return _zinnia.Recognizer_what(*args)
    __swig_destroy__ = _zinnia.delete_Recognizer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _zinnia.new_Recognizer(*args)
        try: self.this.append(this)
        except: self.this = this
Recognizer_swigregister = _zinnia.Recognizer_swigregister
Recognizer_swigregister(Recognizer)

class Trainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Trainer, name)
    __repr__ = _swig_repr
    def add(*args): return _zinnia.Trainer_add(*args)
    def clear(*args): return _zinnia.Trainer_clear(*args)
    def train(*args): return _zinnia.Trainer_train(*args)
    __swig_getmethods__["convert"] = lambda x: _zinnia.Trainer_convert
    if _newclass:convert = staticmethod(_zinnia.Trainer_convert)
    __swig_getmethods__["makeHeader"] = lambda x: _zinnia.Trainer_makeHeader
    if _newclass:makeHeader = staticmethod(_zinnia.Trainer_makeHeader)
    def what(*args): return _zinnia.Trainer_what(*args)
    __swig_destroy__ = _zinnia.delete_Trainer
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _zinnia.new_Trainer(*args)
        try: self.this.append(this)
        except: self.this = this
Trainer_swigregister = _zinnia.Trainer_swigregister
Trainer_swigregister(Trainer)
Trainer_convert = _zinnia.Trainer_convert
Trainer_makeHeader = _zinnia.Trainer_makeHeader

VERSION = _zinnia.VERSION


